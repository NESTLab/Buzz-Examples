# AUTHOR: Carlo Pinciroli <carlo@pinciroli.net>
#
# This script shows a simple example of how to create a tree of robots in Buzz.

include "string.bzz"

TREESTART_PHASE1 = "treestart1_"
TREESTART_PHASE2 = "treestart2_"

#
# A tree is class-like object.
#
tree = {}

#
# Creates a tree with the given id.
#
tree.create = function(tid) {
  return {
    .tid = tid,       # The tree id
    .parent = -1,     # Initially no parent
    .distance = -1.0, # Initially no distance to root
    .children = {}    # Initially no children
  }
}

#
# Starts a new tree.
#
tree.start = function(tr) {
  # Set this robot as root
  tr.distance = 0.0
  # Advertise the creation of a new tree
  var strtid = string.tostring(tr.tid)
  neighbors.broadcast(
    string.concat(TREESTART_PHASE1, strtid), # topic
    { .parent = -1, .distance = 0.0 }) # tree data
  # Listen to children messages
  neighbors.listen(
    string.concat(TREESTART_PHASE2, strtid), # topic
    function(topic, data, rid) {
      # Add child to list, if necessary
      if(data.parent == id)
        tr.children[rid] = 1
      # Check if there are any neighbors not accounted for
      if(neighbors.kin().filter(function(rid, data){ return (tr.children.get(rid) == nil) }).count() == 0)
        neighbors.ignore(TREESTART_PHASE2)
    })
}

#
# Lets a robot join a tree
#
tree.join = function(tr) {
  # Listen to messages regarding the tree
  neighbors.listen(string.concat(TREESTART_PHASE1, string.tostring(tr.tid)),
    function(topic, data, rid) {
      # Estimate my distance to the root
      var dtoroot = data.distance + neighbors.get(rid).distance
      # No parent, add message sender as parent
      if(tr.parent == -1) {
        tr.parent = rid
        tr.distance = dtoroot
      }
      # I have a parent, but I prefer a closer one to the root
      else if(tr.distance > dtoroot) {
        tr.parent = rid
        tr.distance = dtoroot
      }
      # Stop listening to start messages
      neighbors.ignore(topic)	
      # Inform the others that I'm part of the tree
      neighbors.broadcast(topic, { .parent = tr.parent, .distance = tr.distance })
    })
}

#
# Returns true if a robot has joined the given tree.
#
tree.joined = function(tr) {
  return tr.parent > -1
}

#
# Returns true if the current robot is the tree root.
#
tree.isroot = function(tr) {
  return (tr.parent == -1) and (tr.distance == 0.0)
}

#
# Return the number of robots in the tree
#
tree.count = function(tr) {
  # The root initiates the phase 1 of the count process
  if(tree.isroot(tr)) {
    neighbors.broadcast(string.concat("tree", string.tostring(tr.tid), "c1"), 0)
    neighbors.listen(string.concat("tree", string.tostring(tr.tid), "c1"))
  }
  # The other robots
}
